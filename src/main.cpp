#include <iostream>

#include "SDL_main.h"

#include "vec.h"
#include "mat4.h"
#include "window.h"
#include "raster.h"

void clear_z_buffer(float z_buffer[]) {
  for (int i = 0; i < w * h; ++i) {
    z_buffer[i] = INFINITY;
  }
}

void clear_framebuffer() {
  for (int y = 0; y < h; ++y) {
    for (int x = 0; x < w; ++x) {
      uint32_t c = 
        (uint32_t(0  ) << 24) | 
        (uint32_t(0  ) << 16) |
        (uint32_t(0  ) << 8 ) | 
        (uint32_t(255) << 0 );

      framebuffer[x + w * y] = c;
    }
  }
}

int main(int /*argc*/, char * /*argv*/[]) {
  const int v_n = 42;
  vec3 icosphere_v[v_n] = { 
    { 0.000000, -1.000000, 0.000000, }, { 0.723607, -0.447220, 0.525725, }, 
    { -0.276388, -0.447220, 0.850649, }, { -0.894426, -0.447216, 0.000000, }, 
    { -0.276388, -0.447220, -0.850649, }, { 0.723607, -0.447220, -0.525725, }, 
    { 0.276388, 0.447220, 0.850649, }, { -0.723607, 0.447220, 0.525725, }, 
    { -0.723607, 0.447220, -0.525725, }, { 0.276388, 0.447220, -0.850649, }, 
    { 0.894426, 0.447216, 0.000000, }, { 0.000000, 1.000000, 0.000000, }, 
    { -0.162456, -0.850654, 0.499995, }, { 0.425323, -0.850654, 0.309011, }, 
    { 0.262869, -0.525738, 0.809012, }, { 0.850648, -0.525736, 0.000000, }, 
    { 0.425323, -0.850654, -0.309011, }, { -0.525730, -0.850652, 0.000000, }, 
    { -0.688189, -0.525736, 0.499997, }, { -0.162456, -0.850654, -0.499995, }, 
    { -0.688189, -0.525736, -0.499997, }, { 0.262869, -0.525738, -0.809012, }, 
    { 0.951058, 0.000000, 0.309013, }, { 0.951058, 0.000000, -0.309013, }, 
    { 0.000000, 0.000000, 1.000000, }, { 0.587786, 0.000000, 0.809017, }, 
    { -0.951058, 0.000000, 0.309013, }, { -0.587786, 0.000000, 0.809017, }, 
    { -0.587786, 0.000000, -0.809017, }, { -0.951058, 0.000000, -0.309013, }, 
    { 0.587786, 0.000000, -0.809017, }, { 0.000000, 0.000000, -1.000000, }, 
    { 0.688189, 0.525736, 0.499997, }, { -0.262869, 0.525738, 0.809012, }, 
    { -0.850648, 0.525736, 0.000000, }, { -0.262869, 0.525738, -0.809012, }, 
    { 0.688189, 0.525736, -0.499997, }, { 0.162456, 0.850654, 0.499995, }, 
    { 0.525730, 0.850652, 0.000000, }, { -0.425323, 0.850654, 0.309011, }, 
    { -0.425323, 0.850654, -0.309011, }, { 0.162456, 0.850654, -0.499995, } 
  };
  const int vt_n = 63;
  vec3 icosphere_vt[vt_n] = {
    { 0.181819, 0.000000, 0}, 
    { 0.227273, 0.078731, 0}, 
    { 0.136365, 0.078731, 0}, 
    { 0.272728, 0.157461, 0}, 
    { 0.318182, 0.078731, 0}, 
    { 0.363637, 0.157461, 0}, 
    { 0.909091, 0.000000, 0}, 
    { 0.954545, 0.078731, 0}, 
    { 0.863636, 0.078731, 0}, 
    { 0.727273, 0.000000, 0}, 
    { 0.772727, 0.078731, 0}, 
    { 0.681818, 0.078731, 0}, 
    { 0.545455, 0.000000, 0}, 
    { 0.590909, 0.078731, 0}, 
    { 0.500000, 0.078731, 0}, 
    { 0.318182, 0.236191, 0}, 
    { 0.090910, 0.157461, 0}, 
    { 0.181819, 0.157461, 0}, 
    { 0.136365, 0.236191, 0}, 
    { 0.818182, 0.157461, 0}, 
    { 0.909091, 0.157461, 0}, 
    { 0.863636, 0.236191, 0}, 
    { 0.636364, 0.157461, 0}, 
    { 0.727273, 0.157461, 0}, 
    { 0.681818, 0.236191, 0}, 
    { 0.454546, 0.157461, 0}, 
    { 0.545455, 0.157461, 0}, 
    { 0.500000, 0.236191, 0}, 
    { 0.227273, 0.236191, 0}, 
    { 0.045455, 0.236191, 0}, 
    { 0.772727, 0.236191, 0}, 
    { 0.590909, 0.236191, 0}, 
    { 0.409092, 0.236191, 0}, 
    { 0.181819, 0.314921, 0}, 
    { 0.272728, 0.314921, 0}, 
    { 0.227273, 0.393651, 0}, 
    { 0.000000, 0.314921, 0}, 
    { 0.090910, 0.314921, 0}, 
    { 0.045455, 0.393651, 0}, 
    { 0.727273, 0.314921, 0}, 
    { 0.818182, 0.314921, 0}, 
    { 0.772727, 0.393651, 0}, 
    { 0.545455, 0.314921, 0}, 
    { 0.636364, 0.314921, 0}, 
    { 0.590909, 0.393651, 0}, 
    { 0.363637, 0.314921, 0}, 
    { 0.454546, 0.314921, 0}, 
    { 0.409092, 0.393651, 0}, 
    { 0.500000, 0.393651, 0}, 
    { 0.454546, 0.472382, 0}, 
    { 0.681818, 0.393651, 0}, 
    { 0.636364, 0.472382, 0}, 
    { 0.863636, 0.393651, 0}, 
    { 0.818182, 0.472382, 0}, 
    { 0.909091, 0.314921, 0}, 
    { 0.136365, 0.393651, 0}, 
    { 0.090910, 0.472382, 0}, 
    { 0.318182, 0.393651, 0}, 
    { 0.272728, 0.472382, 0}, 
    { 0.954545, 0.236191, 0}, 
    { 1.000000, 0.157461, 0}, 
    { 0.409092, 0.078731, 0}, 
    { 0.363637, 0.000000, 0}
  };
  const int vn_n = 80;
  vec3 icosphere_vn[vn_n] = {
    { 0.1024, -0.9435, 0.3151 },
    { 0.7002, -0.6617, 0.2680 },
    { -0.2680, -0.9435, 0.1947 },
    { -0.2680, -0.9435, -0.1947 },
    { 0.1024, -0.9435, -0.3151 },
    { 0.9050, -0.3304, 0.2680 },
    { 0.0247, -0.3304, 0.9435 },
    { -0.8897, -0.3304, 0.3151 },
    { -0.5746, -0.3304, -0.7488 },
    { 0.5346, -0.3304, -0.7779 },
    { 0.8026, -0.1256, 0.5831 },
    { -0.3066, -0.1256, 0.9435 },
    { -0.9921, -0.1256, 0.0000 },
    { -0.3066, -0.1256, -0.9435 },
    { 0.8026, -0.1256, -0.5831 },
    { 0.4089, 0.6617, 0.6284 },
    { -0.4713, 0.6617, 0.5831 },
    { -0.7002, 0.6617, -0.2680 },
    { 0.0385, 0.6617, -0.7488 },
    { 0.7240, 0.6617, -0.1947 },
    { 0.2680, 0.9435, -0.1947 },
    { 0.4911, 0.7947, -0.3568 },
    { 0.4089, 0.6617, -0.6284 },
    { -0.1024, 0.9435, -0.3151 },
    { -0.1876, 0.7947, -0.5773 },
    { -0.4713, 0.6617, -0.5831 },
    { -0.3313, 0.9435, 0.0000 },
    { -0.6071, 0.7947, 0.0000 },
    { -0.7002, 0.6617, 0.2680 },
    { -0.1024, 0.9435, 0.3151 },
    { -0.1876, 0.7947, 0.5773 },
    { 0.0385, 0.6617, 0.7488 },
    { 0.2680, 0.9435, 0.1947 },
    { 0.4911, 0.7947, 0.3568 },
    { 0.7240, 0.6617, 0.1947 },
    { 0.8897, 0.3304, -0.3151 },
    { 0.7947, 0.1876, -0.5773 },
    { 0.5746, 0.3304, -0.7488 },
    { -0.0247, 0.3304, -0.9435 },
    { -0.3035, 0.1876, -0.9342 },
    { -0.5346, 0.3304, -0.7779 },
    { -0.9050, 0.3304, -0.2680 },
    { -0.9822, 0.1876, 0.0000 },
    { -0.9050, 0.3304, 0.2680 },
    { -0.5346, 0.3304, 0.7779 },
    { -0.3035, 0.1876, 0.9342 },
    { -0.0247, 0.3304, 0.9435 },
    { 0.5746, 0.3304, 0.7488 },
    { 0.7947, 0.1876, 0.5773 },
    { 0.8897, 0.3304, 0.3151 },
    { 0.3066, 0.1256, -0.9435 },
    { 0.3035, -0.1876, -0.9342 },
    { 0.0247, -0.3304, -0.9435 },
    { -0.8026, 0.1256, -0.5831 },
    { -0.7947, -0.1876, -0.5773 },
    { -0.8897, -0.3304, -0.3151 },
    { -0.8026, 0.1256, 0.5831 },
    { -0.7947, -0.1876, 0.5773 },
    { -0.5746, -0.3304, 0.7488 },
    { 0.3066, 0.1256, 0.9435 },
    { 0.3035, -0.1876, 0.9342 },
    { 0.5346, -0.3304, 0.7779 },
    { 0.9921, 0.1256, 0.0000 },
    { 0.9822, -0.1876, 0.0000 },
    { 0.9050, -0.3304, -0.2680 },
    { 0.4713, -0.6617, -0.5831 },
    { 0.1876, -0.7947, -0.5773 },
    { -0.0385, -0.6617, -0.7488 },
    { -0.4089, -0.6617, -0.6284 },
    { -0.4911, -0.7947, -0.3568 },
    { -0.7240, -0.6617, -0.1947 },
    { -0.7240, -0.6617, 0.1947 },
    { -0.4911, -0.7947, 0.3568 },
    { -0.4089, -0.6617, 0.6284 },
    { 0.7002, -0.6617, -0.2680 },
    { 0.6071, -0.7947, 0.0000 },
    { 0.3313, -0.9435, 0.0000 },
    { -0.0385, -0.6617, 0.7488 },
    { 0.1876, -0.7947, 0.5773 },
    { 0.4713, -0.6617, 0.5831 }
  };
  const int f_n = 80;
  face icosphere_f[f_n] = {
    { { 1, 14, 13 }, { 1, 2, 3 }, { 1, 1, 1 } },
    { { 2, 14, 16 }, { 4, 5, 6 }, { 2, 2, 2 } },
    { { 1, 13, 18 }, { 7, 8, 9 }, { 3, 3, 3 } },
    { { 1, 18, 20 }, { 10, 11, 12 }, { 4, 4, 4 } },
    { { 1, 20, 17 }, { 13, 14, 15 }, { 5, 5, 5 } },
    { { 2, 16, 23 }, { 4, 6, 16 }, { 6, 6, 6 } },
    { { 3, 15, 25 }, { 17, 18, 19 }, { 7, 7, 7 } },
    { { 4, 19, 27 }, { 20, 21, 22 }, { 8, 8, 8 } },
    { { 5, 21, 29 }, { 23, 24, 25 }, { 9, 9, 9 } },
    { { 6, 22, 31 }, { 26, 27, 28 }, { 10, 10, 10 } },
    { { 2, 23, 26 }, { 4, 16, 29 }, { 11, 11, 11 } },
    { { 3, 25, 28 }, { 17, 19, 30 }, { 12, 12, 12 } },
    { { 4, 27, 30 }, { 20, 22, 31 }, { 13, 13, 13 } },
    { { 5, 29, 32 }, { 23, 25, 32 }, { 14, 14, 14 } },
    { { 6, 31, 24 }, { 26, 28, 33 }, { 15, 15, 15 } },
    { { 7, 33, 38 }, { 34, 35, 36 }, { 16, 16, 16 } },
    { { 8, 34, 40 }, { 37, 38, 39 }, { 17, 17, 17 } },
    { { 9, 35, 41 }, { 40, 41, 42 }, { 18, 18, 18 } },
    { { 10, 36, 42 }, { 43, 44, 45 }, { 19, 19, 19 } },
    { { 11, 37, 39 }, { 46, 47, 48 }, { 20, 20, 20 } },
    { { 39, 42, 12 }, { 48, 49, 50 }, { 21, 21, 21 } },
    { { 39, 37, 42 }, { 48, 47, 49 }, { 22, 22, 22 } },
    { { 37, 10, 42 }, { 47, 43, 49 }, { 23, 23, 23 } },
    { { 42, 41, 12 }, { 45, 51, 52 }, { 24, 24, 24 } },
    { { 42, 36, 41 }, { 45, 44, 51 }, { 25, 25, 25 } },
    { { 36, 9, 41 }, { 44, 40, 51 }, { 26, 26, 26 } },
    { { 41, 40, 12 }, { 42, 53, 54 }, { 27, 27, 27 } },
    { { 41, 35, 40 }, { 42, 41, 53 }, { 28, 28, 28 } },
    { { 35, 8, 40 }, { 41, 55, 53 }, { 29, 29, 29 } },
    { { 40, 38, 12 }, { 39, 56, 57 }, { 30, 30, 30 } },
    { { 40, 34, 38 }, { 39, 38, 56 }, { 31, 31, 31 } },
    { { 34, 7, 38 }, { 38, 34, 56 }, { 32, 32, 32 } },
    { { 38, 39, 12 }, { 36, 58, 59 }, { 33, 33, 33 } },
    { { 38, 33, 39 }, { 36, 35, 58 }, { 34, 34, 34 } },
    { { 33, 11, 39 }, { 35, 46, 58 }, { 35, 35, 35 } },
    { { 24, 37, 11 }, { 33, 47, 46 }, { 36, 36, 36 } },
    { { 24, 31, 37 }, { 33, 28, 47 }, { 37, 37, 37 } },
    { { 31, 10, 37 }, { 28, 43, 47 }, { 38, 38, 38 } },
    { { 32, 36, 10 }, { 32, 44, 43 }, { 39, 39, 39 } },
    { { 32, 29, 36 }, { 32, 25, 44 }, { 40, 40, 40 } },
    { { 29, 9, 36 }, { 25, 40, 44 }, { 41, 41, 41 } },
    { { 30, 35, 9 }, { 31, 41, 40 }, { 42, 42, 42 } },
    { { 30, 27, 35 }, { 31, 22, 41 }, { 43, 43, 43 } },
    { { 27, 8, 35 }, { 22, 55, 41 }, { 44, 44, 44 } },
    { { 28, 34, 8 }, { 30, 38, 37 }, { 45, 45, 45 } },
    { { 28, 25, 34 }, { 30, 19, 38 }, { 46, 46, 46 } },
    { { 25, 7, 34 }, { 19, 34, 38 }, { 47, 47, 47 } },
    { { 26, 33, 7 }, { 29, 35, 34 }, { 48, 48, 48 } },
    { { 26, 23, 33 }, { 29, 16, 35 }, { 49, 49, 49 } },
    { { 23, 11, 33 }, { 16, 46, 35 }, { 50, 50, 50 } },
    { { 31, 32, 10 }, { 28, 32, 43 }, { 51, 51, 51 } },
    { { 31, 22, 32 }, { 28, 27, 32 }, { 52, 52, 52 } },
    { { 22, 5, 32 }, { 27, 23, 32 }, { 53, 53, 53 } },
    { { 29, 30, 9 }, { 25, 31, 40 }, { 54, 54, 54 } },
    { { 29, 21, 30 }, { 25, 24, 31 }, { 55, 55, 55 } },
    { { 21, 4, 30 }, { 24, 20, 31 }, { 56, 56, 56 } },
    { { 27, 28, 8 }, { 22, 60, 55 }, { 57, 57, 57 } },
    { { 27, 19, 28 }, { 22, 21, 60 }, { 58, 58, 58 } },
    { { 19, 3, 28 }, { 21, 61, 60 }, { 59, 59, 59 } },
    { { 25, 26, 7 }, { 19, 29, 34 }, { 60, 60, 60 } },
    { { 25, 15, 26 }, { 19, 18, 29 }, { 61, 61, 61 } },
    { { 15, 2, 26 }, { 18, 4, 29 }, { 62, 62, 62 } },
    { { 23, 24, 11 }, { 16, 33, 46 }, { 63, 63, 63 } },
    { { 23, 16, 24 }, { 16, 6, 33 }, { 64, 64, 64 } },
    { { 16, 6, 24 }, { 6, 26, 33 }, { 65, 65, 65 } },
    { { 17, 22, 6 }, { 15, 27, 26 }, { 66, 66, 66 } },
    { { 17, 20, 22 }, { 15, 14, 27 }, { 67, 67, 67 } },
    { { 20, 5, 22 }, { 14, 23, 27 }, { 68, 68, 68 } },
    { { 20, 21, 5 }, { 12, 24, 23 }, { 69, 69, 69 } },
    { { 20, 18, 21 }, { 12, 11, 24 }, { 70, 70, 70 } },
    { { 18, 4, 21 }, { 11, 20, 24 }, { 71, 71, 71 } },
    { { 18, 19, 4 }, { 9, 21, 20 }, { 72, 72, 72 } },
    { { 18, 13, 19 }, { 9, 8, 21 }, { 73, 73, 73 } },
    { { 13, 3, 19 }, { 8, 61, 21 }, { 74, 74, 74 } },
    { { 16, 17, 6 }, { 6, 62, 26 }, { 75, 75, 75 } },
    { { 16, 14, 17 }, { 6, 5, 62 }, { 76, 76, 76 } },
    { { 14, 1, 17 }, { 5, 63, 62 }, { 77, 77, 77 } },
    { { 13, 15, 3 }, { 3, 18, 17 }, { 78, 78, 78 } },
    { { 13, 14, 15 }, { 3, 2, 18 }, { 79, 79, 79 } },
    { { 14, 2, 15 }, { 2, 4, 18 }, { 80, 80, 80 } }
  };

  float z_buffer[w * h];
  init(w, h, window, renderer, texture, framebuffer);

  mat4 view = inverse( look_at({0, 0, 2}, {0, 0, 0}) );
  mat4 projection = project(90, 0.1, 100);

  vec3 lightsource = {}; // camera space

  bool quit = false;
  float rad = 0;
  while (!quit) {
    process_input(quit);

    clear_z_buffer(z_buffer);
    clear_framebuffer();

    rad += 0.008;
    lightsource = {16 * cos(rad), 16 * sin(rad), -2};
    mat4 rotation = multiply( multiply( rotation_z(rad), rotation_y(rad) ), rotation_x(rad) );

    mat4 mv = multiply(rotation, view);

    // vertex raster
    mat4 mvp = multiply(mv, projection );
    vec3 icosphere_v_raster[v_n] = {};
    for(int i = 0; i < v_n; ++i) {
      vec4 v_projection = multiply( make_vec4(icosphere_v[i], 1), mvp );
      vec3 p_screen = make_vec3(v_projection);
      if (   p_screen[0] < -1 || p_screen[0] > 1
          || p_screen[1] < -1 || p_screen[1] > 1 ) { continue; }
      vec3 p_ndc = screen_to_ndc(p_screen, 2, 2);
      vec3 p_raster = ndc_to_raster(p_ndc, float(w), float(h));
      icosphere_v_raster[i] = p_raster;
    }

    // vertex camera
    vec3 icosphere_v_camera[v_n] = {};
    for(int i = 0; i < v_n; ++i) {
      vec3 v_camera = make_vec3( multiply( make_vec4(icosphere_v[i], 1), mv) );
      icosphere_v_camera[i] = v_camera;
    }

    // normal camera
    mat4 mv_transpose_inverse = transpose( inverse(mv) );
    vec3 icosphere_vn_camera[vn_n] = {};
    for(int i = 0; i < vn_n; ++i) {
      vec3 vn_camera = make_vec3( multiply( make_vec4(icosphere_vn[i], 1), mv_transpose_inverse) );
      icosphere_vn_camera[i] = vn_camera;
    }

    for(int i = 0; i < f_n; ++i) {
      face f = icosphere_f[i];

      int vni0 = f.normal_indices[0] - 1;
      int vni1 = f.normal_indices[1] - 1;
      int vni2 = f.normal_indices[2] - 1;
      vec3 n[3] = { icosphere_vn_camera[vni0], icosphere_vn_camera[vni1], icosphere_vn_camera[vni2] };
      
      // if(n[0][2] <= 0 || n[1][2] <= 0 || n[2][2] <= 0) { continue; }

      int vi0 = f.vertex_indices[0] - 1;
      int vi1 = f.vertex_indices[1] - 1;
      int vi2 = f.vertex_indices[2] - 1;
      triangle t_raster = { icosphere_v_raster[vi0], icosphere_v_raster[vi1], icosphere_v_raster[vi2] };
      t_raster[0][2] = 1.0 / t_raster[0][2];
      t_raster[1][2] = 1.0 / t_raster[1][2];
      t_raster[2][2] = 1.0 / t_raster[2][2];

      triangle t_camera = { icosphere_v_camera[vi0], icosphere_v_camera[vi1], icosphere_v_camera[vi2] };

      vec3 n_raster0 = multiply(t_raster[0][2], n[0]);
      vec3 n_raster1 = multiply(t_raster[1][2], n[1]);
      vec3 n_raster2 = multiply(t_raster[2][2], n[2]);

      int vti0 = f.texture_indices[0] - 1;
      int vti1 = f.texture_indices[1] - 1;
      int vti2 = f.texture_indices[2] - 1;
      vec3 vt[3] = { icosphere_vt[vti0], icosphere_vt[vti1], icosphere_vt[vti2] };
      vec3 vt_raster0 = multiply(t_raster[0][2], vt[0]);
      vec3 vt_raster1 = multiply(t_raster[1][2], vt[1]);
      vec3 vt_raster2 = multiply(t_raster[2][2], vt[2]);

      aabb bb = make_aabb(t_raster);
      float area = edge_function( t_raster[0], t_raster[1], t_raster[2] );
      for(int y = bb.min_y; y <= bb.max_y ; ++y) {
        for(int x = bb.min_x; x <= bb.max_x; ++x) {
          vec3 pixel = { float(x) + float(0.5), float(y) + float(0.5), 0 };
          float w0 = edge_function(t_raster[1], t_raster[2], pixel); 
          float w1 = edge_function(t_raster[2], t_raster[0], pixel); 
          float w2 = edge_function(t_raster[0], t_raster[1], pixel);

          if (w0 >= 0 && w1 >= 0 && w2 >= 0) { 
            w0 /= area; 
            w1 /= area; 
            w2 /= area;  
            float z = 1.0 / (w0 * t_raster[0][2] + w1 * t_raster[1][2] + w2 * t_raster[2][2]);

            // if (z < z_buffer[x + w * y]) {
              z_buffer[x + w * y] = z;

              // vertex camera
              float vc_x = 
                (t_camera[0][0] / -t_camera[0][2]) * w0 + 
                (t_camera[1][0] / -t_camera[1][2]) * w1 + 
                (t_camera[2][0] / -t_camera[2][2]) * w2; 
              float vc_y = 
                (t_camera[0][1] / -t_camera[0][2]) * w0 + 
                (t_camera[1][1] / -t_camera[1][2]) * w1 + 
                (t_camera[2][1] / -t_camera[2][2]) * w2; 
              vec3 vc = { vc_x * z, vc_y * z, -z }; 

              // normal
              vec3 n_interpolate = add( multiply(w0, n_raster0), multiply(w1, n_raster1) );
              n_interpolate = add(n_interpolate, multiply(w2, n_raster2)); 
              n_interpolate = multiply(z, n_interpolate);
              n_interpolate = normalize(n_interpolate);

              // dot
              float d = fmin(1.0, fmax( 0.0, dot( normalize( subtract(lightsource, vc) ), n_interpolate ) ) );

              // texture
              vec3 vt_interpolate = add( multiply(w0, vt_raster0), multiply(w1, vt_raster1) );
              vt_interpolate = add(vt_interpolate, multiply(w2, vt_raster2)); 
              vt_interpolate = multiply(z, vt_interpolate);

              const int scale = 32; 
              bool s = fmod(vt_interpolate[0] * scale, 1.0) > 0.5;
              bool t = fmod(vt_interpolate[1] * scale, 1.0) < 0.5; 
              float checker_pattern = s ^ t;

              float color = checker_pattern;
              color = fmax( 0.0, fmin( 1.0, color * (d + 0.12)));
              color *= 255;

              uint32_t c = 
                ( uint32_t(color) << 24 ) | 
                ( uint32_t(color) << 16 ) | 
                ( uint32_t(color) << 8  ) | 
                ( uint32_t(255) << 0  );
              
              framebuffer[x + w * y] = c;
            // }
          }
        }
      }
    }

    render(w, renderer, texture, framebuffer);
    SDL_Delay(16);
  }

  deinit(window, renderer, texture, framebuffer);

  return 0;
}